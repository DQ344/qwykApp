// Code generated by goctl. DO NOT EDIT.
// Source: file.proto

package fileclient

import (
	"context"

	"qywk-server/apps/file/rpc/file"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DownLoadReq  = file.DownLoadReq
	DownLoadResp = file.DownLoadResp
	UploadReq    = file.UploadReq
	UploadResp   = file.UploadResp

	File interface {
		// 上传文件
		Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error)
		// 下载文件
		Download(ctx context.Context, in *DownLoadReq, opts ...grpc.CallOption) (*DownLoadResp, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

// 上传文件
func (m *defaultFile) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.Upload(ctx, in, opts...)
}

// 下载文件
func (m *defaultFile) Download(ctx context.Context, in *DownLoadReq, opts ...grpc.CallOption) (*DownLoadResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.Download(ctx, in, opts...)
}
