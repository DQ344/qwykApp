// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"qywk-server/apps/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangeReq      = user.ChangeReq
	ChangeResp     = user.ChangeResp
	CodeReq        = user.CodeReq
	CodeResp       = user.CodeResp
	ForgetReq      = user.ForgetReq
	ForgetResp     = user.ForgetResp
	LoginReq       = user.LoginReq
	LoginResp      = user.LoginResp
	RegisterReq    = user.RegisterReq
	RegisterResp   = user.RegisterResp
	WechatLoginReq = user.WechatLoginReq

	User interface {
		// 普通登陆
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 微信快速登陆
		WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 手机号注册
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		// 发送验证码
		SentCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error)
		// 修改密码
		Change(ctx context.Context, in *ChangeReq, opts ...grpc.CallOption) (*ChangeResp, error)
		// 忘记密码
		Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 普通登陆
func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 微信快速登陆
func (m *defaultUser) WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.WechatLogin(ctx, in, opts...)
}

// 手机号注册
func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 发送验证码
func (m *defaultUser) SentCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SentCode(ctx, in, opts...)
}

// 修改密码
func (m *defaultUser) Change(ctx context.Context, in *ChangeReq, opts ...grpc.CallOption) (*ChangeResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Change(ctx, in, opts...)
}

// 忘记密码
func (m *defaultUser) Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Forget(ctx, in, opts...)
}
