
	import type { IToken } from "@/common/type/user.uts"
	import type { IResponse } from "@/common/type/http.uts"
	import { BASE_URL } from "@/config/index.uts"
	
	type registerLoginInfoType = { __$originalPosition: UTSSourceMapPosition<"registerLoginInfoType", "pages/register/register.uvue", 21, 7>;
		tel:string
		password: string
		code: string
	}
	
	export default {
		data() {
			return {
				registerLoginInfo: {
					tel: '',  // 手机号
					password: '',  // 密码
					code: '',   // 验证码
				} as registerLoginInfoType
			}
		},
		methods: {
			clickRegiter() {
				if(this.registerLoginInfo.tel.length <= 0) return 
				
				console.log(this.registerLoginInfo, " at pages/register/register.uvue:41")
				uni.showLoading({
					title: '登陆中'
				})
				uni.request<IResponse<IToken>>({
					url: BASE_URL + '/user/login/register',
					method: 'POST',
					data: {
						tel: this.registerLoginInfo.tel,  
						password: this.registerLoginInfo.password,  
						code: this.registerLoginInfo.code,   
					},
					success: (res) => {
						let r = res.data
						if(r == null) return
						console.log('注册登录返回信息', r, " at pages/register/register.uvue:56");
						if(r!.code == 200) {
							console.log(r, " at pages/register/register.uvue:58");
							uni.setStorageSync('token', r!.data!.token)
							uni.navigateTo({
								url: '/pages/healthQuestion/healthQuestion'
							})
						} else {
							uni.showToast({
								title: r.message,
								icon: "none"
							})
						}
						
					},
					fail: (err) => {
						console.log(err, " at pages/register/register.uvue:72");
						uni.showToast({
							title: "网络超时",
							icon: "none"
						})
					},
					complete:() => {
						uni.hideLoading()
					}
				})

			}
		},
		onLoad(options) {
			console.log(options, " at pages/register/register.uvue:86")
			this.registerLoginInfo.tel = options["tel"] ?? ""
			this.registerLoginInfo.code = options["code"] ?? ""
			console.log(this.registerLoginInfo, " at pages/register/register.uvue:89")
		}
	}


function GenPagesRegisterRegisterRender(): any | null {
const _ctx = this
const _cache = this.$.renderCache
  return createElementVNode("view", utsMapOf({ class: "validateCode" }), [
    createElementVNode("image", utsMapOf({
      class: "bg-img",
      src: "/static/image/bg/bg_6.png",
      mode: "widthFix"
    })),
    createElementVNode("view", utsMapOf({ class: "window flex flex-column align-center" }), [
      createElementVNode("view", utsMapOf({ class: "top flex align-center" }), [
        createElementVNode("image", utsMapOf({
          src: "/static/image/login/chacha.png",
          mode: "widthFix",
          style: normalizeStyle(utsMapOf({"width":"36rpx","margin-right":"10rpx"}))
        }), null, 4 /* STYLE */),
        createElementVNode("text", utsMapOf({ class: "title" }), "注册并登录")
      ]),
      createElementVNode("input", utsMapOf({
        modelValue: _ctx.registerLoginInfo.password,
        onInput: ($event: InputEvent) => {(_ctx.registerLoginInfo.password) = $event.detail.value},
        class: "uni-input space",
        placeholder: "密码:必须包含英文,数字"
      }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"]),
      createElementVNode("input", utsMapOf({
        modelValue: _ctx.registerLoginInfo.code,
        onInput: ($event: InputEvent) => {(_ctx.registerLoginInfo.code) = $event.detail.value},
        class: "uni-input space",
        placeholder: "验证码"
      }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"]),
      createElementVNode("button", utsMapOf({
        class: "space btn",
        "hover-class": "btn-is-hover",
        onClick: _ctx.clickRegiter
      }), "注册并登录", 8 /* PROPS */, ["onClick"])
    ])
  ])
}
const GenPagesRegisterRegisterStyles = [utsMapOf([["validateCode", padStyleMapOf(utsMapOf([["width", "100%"], ["height", "100%"], ["backgroundColor", "#f2eee9"]]))], ["bg-img", utsMapOf([[".validateCode ", utsMapOf([["width", "650rpx"], ["position", "absolute"], ["left", "50%"], ["transform", "translateX(-50%)"], ["bottom", "-12%"]])]])], ["window", utsMapOf([[".validateCode ", utsMapOf([["boxSizing", "border-box"], ["width", "650rpx"], ["height", "566rpx"], ["paddingTop", "30rpx"], ["paddingRight", "30rpx"], ["paddingBottom", "30rpx"], ["paddingLeft", "30rpx"], ["marginTop", "300rpx"], ["marginRight", "auto"], ["marginBottom", 0], ["marginLeft", "auto"], ["backgroundColor", "rgba(255,255,255,0.6)"], ["borderRadius", "48rpx"]])]])], ["space", utsMapOf([[".validateCode .window ", utsMapOf([["marginBottom", "62rpx"]])]])], ["top", utsMapOf([[".validateCode .window ", utsMapOf([["width", "600rpx"], ["marginBottom", "64rpx"]])]])], ["title", utsMapOf([[".validateCode .window .top ", utsMapOf([["fontSize", 16], ["color", "#937152"]])]])], ["uni-input", utsMapOf([[".validateCode .window ", utsMapOf([["width", "600rpx"], ["height", "76rpx"], ["borderRadius", "32rpx"], ["marginTop", 0], ["marginRight", "auto"], ["marginBottom", 0], ["marginLeft", "auto"], ["paddingLeft", 10], ["fontSize", 12], ["backgroundColor", "#f2eee9"], ["fontSize::placeholder", "28rpx"], ["marginLeft::placeholder", "100rpx"]])]])], ["btn", padStyleMapOf(utsMapOf([["width", "600rpx"], ["height", "76rpx"], ["borderRadius", "32rpx"], ["color", "#ffffff"], ["lineHeight", "76rpx"], ["backgroundColor", "#b19983"]]))], ["btn-is-hover", padStyleMapOf(utsMapOf([["backgroundColor", "#94806e"]]))]])]
